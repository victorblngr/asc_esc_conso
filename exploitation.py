import pandas as pd
from pathlib import Path

# --- Configuration ---
# Determine the directory where the script is located (assuming this script is in the same directory)
SCRIPT_DIR = Path(__file__).resolve().parent
CSV_FILENAME = "fichier_fusionne_echantillon.csv"
CSV_FILE_PATH = SCRIPT_DIR / CSV_FILENAME


def load_and_display_csv(file_path: Path):
    """
    Loads a CSV file into a pandas DataFrame and displays basic info.

    Args:
        file_path (Path): The path to the CSV file.
    """
    try:
        print(f"Attempting to load CSV file: {file_path}")

        df = pd.read_csv(file_path, parse_dates=["Début indispo", "Fin indispo"])

        print("\nSuccessfully loaded the CSV file!")
        print("\n--- First 5 rows of the original data: ---")
        print(df.head())

        print("\n--- Original DataFrame Info: ---")
        df.info()

        print(f"\n--- Shape of the original DataFrame (rows, columns): {df.shape} ---")

        # Ensure 'Début indispo' is datetime (it should be if parse_dates worked)
        # If not using parse_dates in read_csv, uncomment the next line:
        # df["Début indispo"] = pd.to_datetime(df["Début indispo"], errors='coerce')

        # Filter for the year 2025 in 'Début indispo'
        print("\nFiltering data for the year 2025 based on 'Début indispo'...")
        df_2025 = df[
            df["Début indispo"].dt.year == 2025
        ].copy()  # Use .copy() to avoid SettingWithCopyWarning

        if not df_2025.empty:
            print("\n--- First 5 rows of data from 2025: ---")
            print(df_2025.head())
            print(
                f"\n--- Shape of the 2025 DataFrame (rows, columns): {df_2025.shape} ---"
            )
        else:
            print("\nNo data found for the year 2025 in 'Début indispo'.")

    except FileNotFoundError:
        print(f"Error: The file {file_path} was not found.")
        print("Please ensure 'fusion.py' has run successfully and created the file.")
    except pd.errors.EmptyDataError:
        print(f"Error: The file {file_path} is empty.")
    except Exception as e:
        print(f"An error occurred while loading or processing the CSV file: {e}")


if __name__ == "__main__":
    load_and_display_csv(CSV_FILE_PATH)
